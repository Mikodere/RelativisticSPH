#version 430  
precision highp float;

layout( std430, binding=0 ) buffer Pos{
   vec4 Positions[]; 
};

layout( std430, binding=1 ) buffer Vel{
   vec4 Velocities[]; 
};

layout( std430, binding=2 ) buffer Ener{
   float Energies[]; 
};

layout( std430, binding=3 ) buffer Den{
   float Densities[]; 
};

layout( std430, binding=4 ) buffer Pre{
   float Pressures[]; 
};

layout( std430, binding=5 ) buffer Mom{
   vec4 Momentum[]; 
};

layout( std430, binding=6 ) buffer Piv{
   // X: Number of collisions in the cell
   // Y: Initial index
   // z: Final index
   uvec3 Pivots[]; 
};

layout( std430, binding=7 ) buffer HT{
   // X: Object Index
   // Y: Actual compacted Hash Table
   uvec2 HashTable[]; 
};

layout( std430, binding=8 ) buffer Sml{
   // X: Smoothing lenght
   // Y: Omega factor for variational SPH
   vec2 h[]; 
};

layout( local_size_x = 256, local_size_y = 1, local_size_z = 1 ) in;

uniform float PI = 3.14159;
uniform vec3 GRAVITY = vec3(0, -1.5, 0);
uniform float dt = 0.01;
uniform float wallDamping = -0.5;
uniform float pSize = 0.05;

//Uniforms
layout( location = 0) uniform int	N_PARTICLES;		// Numero de particulas
layout( location = 1) uniform float SMOOTHING_LENGTH;	// Distancia de suavizado
layout( location = 2) uniform float density0;			// Densidad en reposo o base
layout( location = 3) uniform float mass;				// Masa de las particulas
layout( location = 4) uniform float Ai;					// Coeficiente de rigidez (presion)
layout( location = 5) uniform float gamma;				// Coeficiente de viscosidad
layout( location = 6) uniform float surfTen;			// Valor umbral tension superficial
layout( location = 7) uniform float tamCube;			// Tamanyo del cubo (colisiones)
layout( location = 8) uniform int grCheck;				// Activar/desactivar la gravedad

//Numero de dimensiones
int D = 3;

//Artificial viscosity variables
float alpha = 1.0;
float beta  = alpha*2.0;
float e		= 0.01;
//------------------------------
uvec2[256] neighbors;	// X INDICATES THE NEIGHBOR PARTICLE INDEX, Y INDICATES (1 VALID, 0 EMPTY)

// IF/ELSE GLSL OPTIMIZATION FUNCTIONS
float when_eq(float x, float y) {
  return 1.0 - abs(sign(x - y));
}

float when_neq(float x, float y) {
  return abs(sign(x - y));
}

float when_gt(float x, float y) {
  return max(sign(x - y), 0.0);
}

uint when_gt(uint x, uint y) {
  return uint(max(sign(x - y), 0));
}

float when_lt(float x, float y) {
  return max(sign(y - x), 0.0);
}

float when_ge(float x, float y) {
  return 1.0 - when_lt(x, y);
}

float when_le(float x, float y) {
  return 1.0 - when_gt(x, y);
}

float when_and(float a, float b) {
  return a * b;
}

float when_or(float a, float b) {
  return min(a + b, 1.0);
}

float when_not(float a) {
  return 1.0 - a;
}

// HASH GRID FUNCTIONS
ivec4 gridFunc(vec4 p)
{
	return ivec4(floor(p.xyz / SMOOTHING_LENGTH), 1.0);
}

uint hashFunc(ivec4 cellIndex)
{
	return (73856093 * cellIndex.x ^ 19349663 * cellIndex.y ^ 83492791 * cellIndex.z) % Pivots.length();
}

uint pos2hash(vec4 pos)
{
	return hashFunc(gridFunc(pos));
}

void updateHashTable()
{
	uint size = Positions.length();
	uint hashSize = HashTable.length();
	for(int i = 0; i < size; i++)
	{
		uint index = pos2hash(Positions[i]);
		HashTable[i].x = index;
		Pivots[i].x++;
	}

	uint accum = 0;
	for(int i = 0; i < hashSize; i++)
	{
		Pivots[i].y = accum * when_gt(Pivots[i].x, 0);
		accum += Pivots[i].x * when_gt(Pivots[i].x, 0);
		Pivots[i].z = accum * when_gt(Pivots[i].x, 0);
	}

	for(int i = 0; i < size; i++)
	{
		HashTable[Pivots[HashTable[i].x].z - 1].y = i;
		Pivots[HashTable[i].x] -= 1;
	}
}

void append2Neighbors(uint index)
{
	uint size = neighbors.length();
	for(uint i = 0; i < size; i++)
	{
		if(neighbors[i].y == 0)
		{
			neighbors[i] = uvec2(index, 1.0);
			break;
		}
	}
}

void computeNeighbors(inout vec4[128] neighs, vec4 pos)
{
	uint cell;
	for(int x = -1; x <= 1; x++){
		for(int y = -1; y <= 1; y++){
			for(int z = -1; z <= 1; z++){
				cell = hashFunc(gridFunc(pos+vec4(x,y,z,0.0)));
				append2Neighbors(cell);
			}
		}
	}
}

float kernelFunction(vec4 q, uint a)
{
	float kernel = 0.0;
	float r = length(q.xyz) / h[a].x;
	float base = 1.0 / (PI * pow(h[a].x, 3));

	kernel += base * (1 - 1.5*pow(r,2) + 0.75*pow(r,3)) * when_and(when_ge(r, 0), when_le(r, 1));
	kernel += base * (0.25 * pow((2-r), 3)) * when_and(when_gt(r, 1), when_le(r, 2));

	return kernel;
}

vec3 kernelGradient(vec4 q, uint a)
{
	vec3 kernel = vec3(0.0);
	float value = 0.0;
	float r = length(q.xyz) / h[a].x;
	float base = -1.0 / (PI * pow(h[a].x, 4));

	value += base * (1 - 1.5*pow(r,2) + 0.75*pow(r,3)) * when_and(when_ge(r, 0), when_le(r, 1));
	value += base * (0.25 * pow((2-r), 3)) * when_and(when_gt(r, 1), when_le(r, 2));

	kernel *= value;

	return kernel;
}

float kernelDerivative(vec4 q, uint a)
{
	float kernel = 0.0;
	float r = length(q.xyz);
	float ha = h[a].x;
	float base = 1.0 / (PI * pow(ha, 4));

	kernel += base * ((-D) + 1.5*(D+2)*pow(r/ha, 2) - 0.75*(D+3)*pow(r/ha, 3)) * when_and(when_ge(r/ha, 0), when_le(r/ha, 1));
	kernel += base * ((-2*D) + 3*(D+1)*(r/ha) - 1.5*(D+2)*pow(r/ha, 2) + 0.25*(D+3)*pow(r/ha, 3)) * when_and(when_gt(r/ha, 1), when_le(r/ha, 2));

	return kernel;
}

//THERMAL ENERGY PER UNIT MASS
float Ui(uint i)
{
	return (Ai * pow(Densities[i], gamma-1) / (gamma - 1));
}

float Cab(uint a, uint b)
{
	//return (sqrt((gamma-1)*Ui(a)) + sqrt((gamma-1)*Ui(b)))/2;
	return (sqrt((gamma-1)*length(Velocities[a].xyz)) + sqrt((gamma-1) * length(Velocities[b].xyz))) / 2;
}

float MUab(uint a, uint b)
{
	vec3 delta = Positions[a].xyz - Positions[b].xyz;
	float hab = ((h[a].x + h[b].x)/2);
	return dot(hab * delta, Velocities[a].xyz - Velocities[b].xyz) / (pow(length(delta), 2) + e * pow(hab, 2));
}

float artificialViscosity(uint a, uint b)
{
	vec3 dPos = Positions[a].xyz - Positions[b].xyz;
	vec3 dVel = Velocities[a].xyz - Velocities[b].xyz;

	float c = Cab(a, b);

	float PIab = (-alpha * c * MUab(a, b) + beta * pow(MUab(a, b), 2) / ((Densities[a] + Densities[b])/2)) * when_lt(dot(dPos, dVel), 0);
	return PIab;
}

void main()
{
	uint i = gl_GlobalInvocationID.x;

	//NEW SMOOTHING LENGTH
	h[i].x = 1.35 * pow(mass/ Densities[i] , 1.0/D);

	// DENSITY - PRESSURE CALCULATION
	float densSum = 0.0;
	float omega = 0.0;


	for(uint j = 0; j < N_PARTICLES; j++)
	{
		//if(i == j) {continue;}
		vec4 delta = Positions[i] - Positions[j];
		densSum += (mass * kernelFunction(delta, i));
		omega += (mass * kernelDerivative(delta, i));
	}

	Densities[i] = densSum + (0.000001 * when_lt(densSum, 0.000001));	// Pity Density for stability;
	
	//Pressures[i] = (gamma-1) * Densities[i] * Ui(i);
	//Pressures[i] = (gamma-1) * Densities[i] * length(Velocities[i].xyz);
	
	h[i].y = 1 - (-1.35 * pow(mass, 1.0/3.0) / (3 * pow(Densities[i], 4.0/3.0))) * omega;

	// PRESSURE, VISCOSITY AND SURFACE TENSION FORCES

	vec3 momentum = vec3(0.0);
	float energy = 0.0;

	for(uint j = 0; j < N_PARTICLES; j++)
	{
		//if(i == j) {continue;}
		vec4 delta = Positions[i] - Positions[j];
		vec3 Waba = kernelGradient(delta, i);		// KERNEL VALUE
		vec3 Wabb = kernelGradient(delta, j);
		float PIab = artificialViscosity(i, j);		// ARTIFICIAL VISCOSITY
		
		vec3 f1 = (Pressures[i] / (h[i].y + pow(Densities[i], 2))) * Waba;
		vec3 f2 = (Pressures[j] / (h[j].y + pow(Densities[j], 2))) * Wabb;

		momentum = momentum + mass * (f1 + f2);
		energy = energy + mass * dot(Velocities[i].xyz - Velocities[j].xyz, Waba);
	}
	
	Pressures[i] = (gamma-1) * Densities[i] * energy;
	Momentum[i] = vec4(momentum , 1.0);
	Energies[i] = (1/h[i].y) * (Pressures[i] * pow(Densities[i], 2)) * (energy);

	// INTEGRATION RK2
	vec3 acceleration = Momentum[i].xyz + GRAVITY*grCheck;
    vec3 n05_velocity = Velocities[i].xyz + acceleration * (dt/2);
	vec3 new_velocity = Velocities[i].xyz + dt * acceleration;
    vec3 new_position = Positions[i].xyz + dt * ((n05_velocity + Velocities[i].xyz)/2); 

//	vec3 acceleration = vec3(Momentum[i].x, 0, 0);
//    vec3 n05_velocity = vec3(Velocities[i].x, 0.0, 0.0) + acceleration * (dt/2);
//    vec3 new_position = vec3(Positions[i].x, 0.0, 0.0) + dt * ((n05_velocity + vec3(Velocities[i].x, 0.0, 0.0))/2); 
//	vec3 new_velocity = vec3(Velocities[i].x, 0.0, 0.0) + dt * acceleration;

	float dcol, d;
	vec3 deltaS;

	//COLLISION CHECK
	// X axis
//	dcol = abs(dot(new_position - vec3(tamCube,0,0), vec3(-1,0,0)));
//	if(dcol < pSize){
//		d = dcol - pSize;
//		deltaS = vec3(-1,0,0) * d * (1+wallDamping);
//		new_velocity -= deltaS;
//		new_velocity = reflect(new_velocity, vec3(-1,0,0));
//	}
//
//	dcol = abs(dot(new_position - vec3(-tamCube,0,0), vec3(1,0,0)));
//	if(dcol < pSize){
//		d = dcol - pSize;
//		deltaS = vec3(1,0,0) * d * (1+wallDamping);
//		new_velocity -= deltaS;
//		new_velocity = reflect(new_velocity, vec3(1,0,0));
//	}

	// Y axis (UP)
//	dcol = abs(dot(new_position - vec3(0,tamCube,0), vec3(0,-1,0)));
//	if(dcol < pSize){
//		d = dcol - pSize;
//		deltaS = vec3(0,-1,0) * d * (1+wallDamping);
//		new_velocity -= deltaS;
//		new_velocity = reflect(new_velocity, vec3(0,-1,0));
//	}

	// Z axis
//	dcol = abs(dot(new_position - vec3(0,0,tamCube), vec3(0,0,-1)));
//	if(dcol < pSize){
//		d = dcol - pSize;
//		deltaS = vec3(0,0,-1) * d * (1+wallDamping);
//		new_velocity -= deltaS;
//		new_velocity = reflect(new_velocity, vec3(0,0,-1));
//	}
//
//	dcol = abs(dot(new_position - vec3(0,0,-tamCube), vec3(0,0,1)));
//	if(dcol < pSize){
//		d = dcol - pSize;
//		deltaS = vec3(0,0,1) * d * (1+wallDamping);
//		new_velocity -= deltaS;
//		new_velocity = reflect(new_velocity, vec3(0,0,1));
//	}
//
//	// Y Axis (DOWN)
//	dcol = abs(dot(new_position - vec3(0,-tamCube,0), vec3(0,1,0)));
//	if(dcol < pSize){
//		d = dcol - pSize;
//		deltaS = vec3(0,1,0) * d * (0.01);
//		new_velocity -= deltaS;
//		new_velocity = reflect(new_velocity, vec3(0,1,0));
//	}

	Positions[i] = vec4(new_position, 1.0);
	Velocities[i]= vec4(new_velocity, 1.0);
	 
}


